#!/usr/bin/env python2

"""
    RSS 2019 | Pure Pursuit controller for path tracking
    Author: Kyle Morgenstein
"""
from __future__ import division
import numpy as np
import rospy
from rospy.numpy_msg import numpy_msg
from std_msgs.msg import Float32
from ackermann_msgs.msg import AckermannDriveStamped
import utils
from geometry_msgs.msg import Point32
from visualization_msgs.msg import Marker
from sensor_msgs.msg import PointCloud
from geometry_msgs.msg import Point
#from nav_msgs.msg import Path
import numpy as np
import warnings



warnings.simplefilter('ignore', np.RankWarning)

class PureP:
    # Access these variables in class functions with self:
    # i.e. self.CONSTANT
    PATH_TOPIC = rospy.get_param("/Trajectory_follower/path_topic")
    DRIVE_TOPIC = rospy.get_param("/Trajectory_follower/drive_topic")
    VELOCITY = float(rospy.get_param("/Trajectory_follower/velocity"))  # [m/s]
    local_topic = "/estim_pose"

    def __init__(self):
        #subs
        self.pose_sub = rospy.Subscriber(self.local_topic,Point32,self.pose_callback,queue_size=10)
        # self.sub = rospy.Subscriber(self.PATH_TOPIC, PointCloud, self.callback, queue_size=10)
        self.sub = rospy.Subscriber(self.PATH_TOPIC, Point32, self.callback, queue_size=10)
        # pubs
        self.pub = rospy.Publisher(self.DRIVE_TOPIC,AckermannDriveStamped, queue_size=10)
        self.pub_line = rospy.Publisher("marker",Marker,queue_size=10)
        #initialized vars
        self.position = np.zeros(2)
        self.path = 0

        print "Pure Pursuit initialized"


    def pose_callback(self,data):
        '''
        input: position [x,y,th]
        output: u: AckermannDriveStamped Message containing:
                        steering angle [rad]
                        rate of steering control [rad/s]
                        velocity [m/s]
        '''
        self.position = np.array([data.x,data.y,data.z]) #sets global position variable
        pos_map = self.position[0:2] #keeps track of x,y for path transform
        data_vec = self.path #imports global path
        if self.path==0: #checks that path has been received
            pass
        d = np.array(data_vec-pos_map).reshape(-1,2) # (n,2), puts data in robot frame (robot is at (0,0)), splits data into x and y each of length n

        dists = np.einsum('ij,ij->i',d,d)
        i = np.argmin(dists) #index of closest waypoint
        try:
            path_remaining = d[i:i+25,:] #cuts off prior waypoints already passed
            dists_remaining = dists[i:i+25]
        except: #warps path to cyclic if nearing the end of the path
            path_remaining = np.concatenate((d[i:,:],d[:25,:]))
            dists_remaining = np.concatenate((dists[i:,:],dists[:25]))

        #combined proportional-pure persuit controller with Ackermann steering
        L = .324 #length of wheel base [m]

        #need speed controller for corners if want to attempt high speed maneuvers
        #x,y = path_remaining.T     to be used for speed controller in the future
        #m,b = np.polyfit(x[0:5],y[0:5],1)

        #dynamic lookahead distance
        v = self.VELOCITY
        if v<1:
            l=1
        elif 1<v<5:
            l=v/5+1
        else:
            l=v/2

        straight_line_condition = False
        #find point in path one lookahead distance out
        #this is the fewest possible computations
        for j in range(len(dists_remaining)):
            # find index of first waypoint in the line segment containing
            # the point on the path one lookahead distance away from the robot
            try:
                p2 = path_remaining[j+1,:]
            except:
                ind = j
                break
            p1 = path_remaining[j,:]
            path_step = np.linalg.norm(p2-p1) #takes distance between p2 and p1 to find path step
            if 0<l-dists_remaining[j]<path_step:
                ind = j
                break
            #check if path is more than one lookahead distance from robot
            if l<dists_remaining[j]:
                straight_line_condition = True
                ind2 = j
                #l = dists_remaining[j]
                break
        else:
            ind = 0

        flag = False
        #take x,y coor of p1 and p2
        try:
            x1 = path_remaining[ind,0]
            y1 = path_remaining[ind,1]
            x2 = path_remaining[ind+1,0]
            y2 = path_remaining[ind+1,1]
            if y2==y1: #edge case
                y_new = y1
                x_new = np.sqrt(l**2-y1**2)
                flag = True
            if x2==x1: #edge case
                x_new = x1
                y_new = np.sqrt(l**2-x1**2)
                flag = True
        except: #if at the end of the path, set point to last waypoint
            if straight_line_condition:
            	x1 = self.position[0]
            	y1 = self.position[1]
            	x2 = path_remaining[ind2,0]
            	y2 = path_remaining[ind2,1]
            else:
            	x_new = path_remaining[ind,0]
            	y_new = path_remaining[ind,1]
            	flag = True


        #standard computation
        if not flag:

            p1 = np.array([[x1,y1]])
            p2 = np.array([[x2,y2]])
            v = p2-p1

            a = np.dot(v,v.T)
            b = 2*(np.dot(v,p1.T))
            c = np.dot(p1,p1.T)-l**2

            t1 = min(1,max(0,(-b-np.sqrt(b**2-4*a*c))/(2*a)))
            t2 = min(1,max(0,(-b+np.sqrt(b**2-4*a*c))/(2*a)))
            t = max(t1,t2)

            new_point = p1 + t*v
            x_new,y_new = new_point.T


        # compute ackermann steering angle to feed into cotroller
        eta = np.arctan2(y_new,x_new)-self.position[2] #angle between velocity vector and desired path [rad]
        u = np.arctan(2*L*np.sin(eta)/l) #sets input steering angle from controller [rad]

        A = AckermannDriveStamped()
        A.drive.speed = self.VELOCITY #sets velocity [m/s]
        A.drive.steering_angle = u #determines input steering control
        A.drive.steering_angle_velocity = 0 #determines how quickly steering is adjuted, 0 is instantaneous [rad/s]
        self.pub.publish(A) #publish steering command

    def make_marker(self,d):
        #generates marker message
        m = Marker()
        m.header.frame_id="map"
        m.action=0
        m.id = 1
        m.pose.orientation.w=1
        m.type=Marker.LINE_LIST
        m.scale.x=.1
        m.color.g=1
        m.color.a=1
        l = []
        for i in d:
            p = Point()
            p.x=i[0]
            p.y=i[1]
            p.z=0
            l.append(p)
        m.points=l

        self.pub_line.publish(m) #publish marker


    #def callback(self,path_info):
    def callback(self,d):
        '''
        sets path in map
		'''

        ## data preprocessing
        #def conv():
        #	d = [{"y": -0.8895988464355469, "x": 0.4171772003173828}, {"y": -0.6701974868774414, "x": -30.42536163330078}, {"y": -0.3597745895385742, "x": -32.4092903137207}, {"y": 0.8645005226135254, "x": -33.037513732910156}, {"y": 30.7249698638916, "x": -33.17718505859375}, {"y": 32.2868766784668, "x": -33.165679931640625}, {"y": 33.415687561035156, "x": -33.283687591552734}, {"y": 33.91817855834961, "x": -32.811187744140625}, {"y": 34.09068298339844, "x": -31.738685607910156}, {"y": 33.959041595458984, "x": -29.598907470703125}, {"y": 33.96776580810547, "x": -0.5014395713806152}, {"y": 34.000389099121094, "x": 0.5176341533660889}, {"y": 33.48455810546875, "x": 1.3077607154846191}, {"y": 32.55713653564453, "x": 1.553515911102295}, {"y": 31.470308303833008, "x": 1.4412281513214111}, {"y": 26.959705352783203, "x": 1.5491182804107666}, {"y": 26.068689346313477, "x": 1.6574804782867432}, {"y": 25.549406051635742, "x": 2.4118423461914062}, {"y": 25.40235137939453, "x": 3.219785213470459}, {"y": 25.483911514282227, "x": 4.841587543487549}, {"y": 25.64862060546875, "x": 6.924839496612549}, {"y": 25.571475982666016, "x": 13.471232414245605}, {"y": 25.419279098510742, "x": 15.124458312988281}, {"y": 24.356502532958984, "x": 16.07210922241211}, {"y": 22.99414825439453, "x": 16.297348022460938}, {"y": 21.70294761657715, "x": 15.853641510009766}, {"y": 20.401371002197266, "x": 14.811742782592773}, {"y": 10.674541473388672, "x": 6.36682653427124}, {"y": 8.482307434082031, "x": 4.451013088226318}, {"y": 6.8183746337890625, "x": 3.0730931758880615}, {"y": 5.353919506072998, "x": 2.6476709842681885}, {"y": 1.4918694496154785, "x": 1.9159927368164062}]
        #	a = []
        #	for i in d:
        #		a.append([i.values()[1]-22,i.values()[0]])
        #	return a
        # data = [[pose_stamped.pose.position.x, pose_stamped.pose.position.y] for pose_stamped in path_info.poses]
        #data_ved = np.array(data)
        #data_vec = [[-.05*x, .0] for x in range(400)] #+ [[20, .05*x] for x in range(100)]
        print("map initialized")
        data_vec = [[i.x,i.y] for i in d.points]
        '''
        data_vec = [
        [13.761675857774913, -0.18534033611027692], [13.808737887808133, -0.20222717504337123], 
        [13.855799917841354, -0.21911401397646554], [13.902861947874575, -0.23600085290955986], [13.949923977907796, -0.25288769184265414], 
        [13.996986007941016, -0.2697745307757485], [14.044048037974237, -0.2866613697088428], [14.091110068007458, -0.3035482086419371],
         [14.138172098040679, -0.3204350475750314], [14.1852341280739, -0.3373218865081257], [14.23229615810712, -0.35420872544122006], 
         [14.27935818814034, -0.37109556437431435], [14.326420218173562, -0.38798240330740863], [14.373482248206782, -0.40486924224050297], 
         [14.420544278240003, -0.4217560811735973], [14.467606308273224, -0.4386429201066916], [14.514668338306445, -0.4555297590397859], 
         [14.561730368339665, -0.47241659797288016], [14.608792398372886, -0.48930343690597455], [14.655854428406107, -0.5061902758390688], 
         [14.702916458439327, -0.5230771147721631], [14.749978488472548, -0.5399639537052574], [14.797040518505769, -0.5568507926383518], 
         [14.84410254853899, -0.5737376315714461], [14.89116457857221, -0.5906244705045404], [14.938226608605431, -0.6075113094376347], 
         [14.985288638638652, -0.624398148370729], [15.032350668671873, -0.6412849873038233], [15.079412698705093, -0.6581718262369176], 
         [12.794087183457918, 0.06498637182395212], [12.84249345855256, 0.052463092243035206], [12.890899733647203, 0.039939812662118296], 
         [12.939306008741845, 0.027416533081201386], [12.987712283836487, 0.014893253500284476], [13.036118558931129, 0.0023699739193675656], 
         [13.084524834025771, -0.010153305661549344], [13.132931109120413, -0.022676585242466255], [13.181337384215055, -0.035199864823383165], 
         [13.229743659309698, -0.047723144404300075], [13.27814993440434, -0.060246423985216985], [13.326556209498982, -0.07276970356613388], 
         [13.374962484593624, -0.0852929831470508], [13.423368759688266, -0.09781626272796773], [13.471775034782908, -0.11033954230888462], 
         [13.52018130987755, -0.12286282188980152], [13.568587584972192, -0.13538610147071845], [13.616993860066835, -0.14790938105163537], 
         [13.665400135161477, -0.16043266063255227], [13.713806410256119, -0.17295594021346916], [12.794087183457918, 0.06498637182395212], 
         [12.744103016243233, 0.0662445561722967], [12.694118849028548, 0.06750274052064129], [12.644134681813863, 0.06876092486898587], 
         [12.594150514599178, 0.07001910921733046], [12.544166347384493, 0.07127729356567504], [12.494182180169808, 0.07253547791401962], 
         [12.444198012955123, 0.07379366226236421], [12.394213845740438, 0.0750518466107088], [12.344229678525753, 0.07631003095905338], 
         [12.294245511311068, 0.07756821530739796], [12.244261344096383, 0.07882639965574255], [12.194277176881698, 0.08008458400408713], 
         [12.144293009667013, 0.08134276835243172], [12.094308842452328, 0.0826009527007763], [12.044324675237643, 0.08385913704912089], 
         [11.994340508022958, 0.08511732139746547], [11.944356340808273, 0.08637550574581006], [11.894372173593588, 0.08763369009415464], 
         [11.844388006378903, 0.08889187444249923], [11.794403839164218, 0.09015005879084381], [11.744419671949533, 0.0914082431391884], 
         [11.694435504734848, 0.09266642748753298], [11.644451337520163, 0.09392461183587757], [11.594467170305478, 0.09518279618422215], 
         [11.544483003090793, 0.09644098053256674], [11.494498835876108, 0.09769916488091132], [11.444514668661423, 0.0989573492292559], 
         [11.394530501446738, 0.10021553357760049], [11.344546334232053, 0.10147371792594508], [11.294562167017368, 0.10273190227428966], 
         [11.244577999802683, 0.10399008662263425], [11.194593832587998, 0.10524827097097883], [11.144609665373313, 0.10650645531932341], 
         [11.094625498158628, 0.107764639667668], [11.044641330943943, 0.10902282401601258], [10.994657163729258, 0.11028100836435717], 
         [10.944672996514573, 0.11153919271270175], [10.894688829299888, 0.11279737706104634], [10.844704662085203, 0.11405556140939092], 
         [10.794720494870518, 0.11531374575773551], [10.744736327655833, 0.1165719301060801], [10.694752160441148, 0.11783011445442468], 
         [10.644767993226463, 0.11908829880276926], [10.594783826011778, 0.12034648315111385], [10.544799658797093, 0.12160466749945843], 
         [10.494815491582408, 0.12286285184780302], [10.444831324367723, 0.1241210361961476], [10.394847157153038, 0.1253792205444922], 
         [10.344862989938353, 0.12663740489283676], [10.294878822723668, 0.12789558924118136], [10.244894655508983, 0.12915377358952596], 
         [10.194910488294298, 0.13041195793787053], [10.144926321079613, 0.1316701422862151], [10.094942153864928, 0.1329283266345597], 
         [10.044957986650243, 0.1341865109829043], [9.994973819435558, 0.13544469533124887], [9.944989652220873, 0.13670287967959344], 
         [9.895005485006187, 0.13796106402793804], [9.845021317791502, 0.13921924837628263], [9.795037150576817, 0.1404774327246272], 
         [9.745052983362132, 0.14173561707297178], [9.695068816147447, 0.14299380142131637], [9.645084648932762, 0.14425198576966097], 
         [9.595100481718077, 0.14551017011800554], [9.545116314503392, 0.14676835446635011], [9.495132147288707, 0.1480265388146947], 
         [9.445147980074022, 0.1492847231630393], [9.395163812859337, 0.15054290751138388], [9.345179645644652, 0.15180109185972845], 
         [9.295195478429967, 0.15305927620807305], [9.245211311215282, 0.15431746055641765], [9.195227144000597, 0.15557564490476222], 
         [9.145242976785912, 0.1568338292531068], [9.095258809571227, 0.1580920136014514], [9.045274642356542, 0.159350197949796], 
         [8.995290475141857, 0.16060838229814056], [8.945306307927172, 0.16186656664648513], [8.895322140712487, 0.16312475099482973], 
         [8.845337973497802, 0.16438293534317433], [8.795353806283117, 0.1656411196915189], [8.745369639068432, 0.16689930403986347], 
         [8.695385471853747, 0.16815748838820807], [8.645401304639062, 0.16941567273655267], [8.595417137424377, 0.17067385708489724], 
         [8.545432970209692, 0.1719320414332418], [8.495448802995007, 0.1731902257815864], [8.445464635780322, 0.174448410129931], 
         [8.395480468565637, 0.17570659447827558], [8.345496301350952, 0.17696477882662015], [8.295512134136267, 0.17822296317496475], 
         [8.245527966921582, 0.17948114752330935], [8.195543799706897, 0.18073933187165392], [8.145559632492212, 0.1819975162199985], 
         [8.095575465277527, 0.1832557005683431], [8.045591298062842, 0.1845138849166877], [7.995607130848157, 0.18577206926503226], 
         [7.945622963633472, 0.18703025361337683], [7.895638796418787, 0.18828843796172143], [7.845654629204102, 0.18954662231006603], 
         [7.795670461989417, 0.1908048066584106], [7.745686294774732, 0.19206299100675517], [7.695702127560047, 0.19332117535509977], 
         [7.645717960345362, 0.19457935970344437], [7.595733793130677, 0.19583754405178894], [7.545749625915992, 0.1970957284001335], 
         [7.495765458701307, 0.1983539127484781], [7.445781291486622, 0.1996120970968227], [7.395797124271937, 0.20087028144516728], 
         [7.345812957057252, 0.20212846579351185], [7.295828789842567, 0.20338665014185645], [7.245844622627882, 0.20464483449020104], 
         [7.195860455413197, 0.20590301883854562], [7.145876288198512, 0.20716120318689019], [7.095892120983827, 0.20841938753523478], 
         [7.045907953769142, 0.20967757188357938], [6.995923786554457, 0.21093575623192395], [6.9459396193397716, 0.21219394058026853], 
         [6.8959554521250865, 0.21345212492861312], [6.8459712849104015, 0.21471030927695772], [6.7959871176957165, 0.2159684936253023], 
         [6.7460029504810315, 0.21722667797364686], [6.6960187832663465, 0.21848486232199146], [6.6460346160516615, 0.21974304667033606], 
         [6.596050448836976, 0.22100123101868063], [6.546066281622291, 0.2222594153670252], [6.496082114407606, 0.2235175997153698], 
         [6.446097947192921, 0.2247757840637144], [6.396113779978236, 0.22603396841205897], [6.346129612763551, 0.22729215276040354], 
         [6.296145445548866, 0.22855033710874814], [6.246161278334181, 0.22980852145709274], [6.196177111119496, 0.2310667058054373], 
         [6.146192943904811, 0.23232489015378188], [6.096208776690126, 0.23358307450212648], [6.046224609475441, 0.23484125885047108], 
         [5.996240442260756, 0.23609944319881565], [5.946256275046071, 0.23735762754716022], [5.896272107831386, 0.23861581189550482], 
         [5.846287940616701, 0.23987399624384942], [5.796303773402016, 0.241132180592194], [5.746319606187331, 0.24239036494053856], 
         [5.696335438972646, 0.24364854928888316], [5.646351271757961, 0.24490673363722776], [5.596367104543276, 0.24616491798557233], 
         [5.546382937328591, 0.2474231023339169], [5.496398770113906, 0.2486812866822615], [5.446414602899221, 0.2499394710306061], 
         [5.396430435684536, 0.25119765537895067], [5.346446268469851, 0.25245583972729524], [5.296462101255166, 0.2537140240756398], 
         [5.246477934040481, 0.25497220842398444], [5.196493766825796, 0.256230392772329], [5.146509599611111, 0.2574885771206736], 
         [5.096525432396426, 0.2587467614690182], [5.046541265181741, 0.2600049458173628], [4.996557097967056, 0.26126313016570735], 
         [4.946572930752371, 0.2625213145140519], [4.896588763537686, 0.2637794988623965], [4.846604596323001, 0.2650376832107411], 
         [4.796620429108316, 0.2662958675590857], [4.746636261893631, 0.26755405190743026], [4.696652094678946, 0.2688122362557749], 
         [4.646667927464261, 0.27007042060411945], [4.596683760249576, 0.271328604952464], [4.546699593034891, 0.2725867893008086], 
         [4.496715425820206, 0.27384497364915317], [4.446731258605521, 0.2751031579974978], [4.396747091390836, 0.27636134234584236], 
         [4.346762924176151, 0.27761952669418694], [4.296778756961466, 0.27887771104253156], [4.246794589746781, 0.28013589539087613], 
         [4.196810422532096, 0.2813940797392207], [4.146826255317411, 0.2826522640875653], [4.096842088102726, 0.28391044843590985], 
         [4.046857920888041, 0.28516863278425447], [3.9968737536733556, 0.28642681713259904], [3.9468895864586706, 0.2876850014809436], 
         [3.8969054192439856, 0.28894318582928824], [3.8469212520293006, 0.2902013701776328], [3.7969370848146156, 0.2914595545259774], 
         [3.7469529175999305, 0.29271773887432195], [3.6969687503852455, 0.2939759232226665], [3.6469845831705605, 0.29523410757101115], 
         [3.5970004159558755, 0.2964922919193557], [3.5470162487411905, 0.2977504762677003], [3.4970320815265055, 0.2990086606160449], 
         [3.4470479143118204, 0.3002668449643895], [3.3970637470971354, 0.30152502931273406], [3.3470795798824504, 0.30278321366107863], 
         [3.2970954126677654, 0.3040413980094232], [3.2471112454530804, 0.30529958235776783], [3.1971270782383954, 0.3065577667061124], 
         [3.1471429110237104, 0.30781595105445697], [3.0971587438090253, 0.3090741354028016], [3.0471745765943403, 0.31033231975114617], 
         [2.9971904093796553, 0.31159050409949074], [2.9472062421649703, 0.3128486884478353], [2.8972220749502853, 0.3141068727961799], 
         [2.8472379077356003, 0.3153650571445245], [2.7972537405209152, 0.3166232414928691], [2.7472695733062302, 0.31788142584121365], 
         [2.697285406091545, 0.3191396101895582], [2.64730123887686, 0.32039779453790285], [2.6267555663963265, 0.32091496317312757], 
         [2.5767556435918815, 0.3210028241403234], [2.5267557207874365, 0.3210906851075192], [2.4767557979829915, 0.321178546074715], 
         [2.4267558751785465, 0.32126640704191084], [2.3767559523741015, 0.32135426800910666], [2.3267560295696565, 0.3214421289763025], 
         [2.2767561067652116, 0.3215299899434983], [2.2267561839607666, 0.3216178509106941], [2.1767562611563216, 0.32170571187788993], 
         [2.1267563383518766, 0.32179357284508575], [2.0767564155474316, 0.32188143381228157], [2.0267564927429866, 0.3219692947794774], 
         [1.9767565699385417, 0.3220571557466732], [1.9267566471340967, 0.322145016713869], [1.8767567243296517, 0.32223287768106484], 
         [1.8267568015252067, 0.32232073864826066], [1.7767568787207617, 0.3224085996154565], [1.7267569559163167, 0.3224964605826523], 
         [1.6767570331118717, 0.3225843215498481], [1.6267571103074268, 0.32267218251704394], [1.5767571875029818, 0.32276004348423976], 
         [1.5267572646985368, 0.3228479044514356], [1.4767573418940918, 0.3229357654186314], [1.4267574190896468, 0.3230236263858272], 
         [1.3767574962852018, 0.32311148735302303], [1.3267575734807568, 0.32319934832021885], [1.2767576506763119, 0.32328720928741467], 
         [1.2267577278718669, 0.3233750702546105], [1.176757805067422, 0.3234629312218063], [1.126757882262977, 0.3235507921890021], 
         [1.076757959458532, 0.32363865315619794], [1.026758036654087, 0.32372651412339376], [0.976758113849642, 0.3238143750905896], 
         [0.926758191045197, 0.3239022360577854], [0.876758268240752, 0.3239900970249812], [0.826758345436307, 0.32407795799217703], 
         [0.776758422631862, 0.32416581895937285], [0.726758499827417, 0.32425367992656867], [0.676758577022972, 0.3243415408937645], 
         [0.6267586542185271, 0.3244294018609603], [0.5767587314140821, 0.32451726282815613], [0.5267588086096371, 0.32460512379535195], 
         [0.4767588858051921, 0.32469298476254776], [0.4267589630007471, 0.3247808457297436], [0.37675904019630213, 0.3248687066969394], 
         [0.32675911739185715, 0.3249565676641352], [0.27675919458741216, 0.32504442863133104], [0.22675927178296718, 0.32513228959852686], 
         [0.1767593489785222, 0.3252201505657227], [0.1267594261740772, 0.3253080115329185], [0.07675950336963222, 0.3253958725001143], 
         [0.026759580565187235, 0.32548373346731013], [-0.02324034223925775, 0.32557159443450595], [-0.07324026504370273, 0.32565945540170177], 
         [-0.12324018784814772, 0.3257473163688976], [-0.1732401106525927, 0.3258351773360934], [-0.2232400334570377, 0.3259230383032892], 
         [-0.2732399562614827, 0.32601089927048504], [-0.32323987906592766, 0.32609876023768086], [-0.37323980187037264, 0.3261866212048767]
         ] 
         '''
        #data_vec = conv()
        #pos_map = np.array([[self.position[0],self.position[1]]]) # (1,2)
        self.path = data_vec
        dmark = []
        for i in data_vec:
        	dmark.append(i)
        	if i!=data_vec[0] and i!=data_vec[-1]:
        		dmark.append(i)
        self.make_marker(dmark) #generate marker message



if __name__ == "__main__":
    rospy.init_node("PureP")
    path_planning = PureP()
    rospy.spin()
